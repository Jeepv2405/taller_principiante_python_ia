# -*- coding: utf-8 -*-
"""taller_principiante.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10dTQf3q1rjT_GqUfRMCyQwz9bV5ycjmf

Importar las bibliotecas necesarias
Esta celda importa las bibliotecas requeridas, como time y requests, para manejar el tiempo y las solicitudes HTTP.
"""

# Importar las bibliotecas necesarias
import time
import requests

"""Clase para manejar la API de Groq
Esta celda define una clase para interactuar con la API de Groq.
"""

# Clase para inicializar el cliente de la API de Groq
class GroqAPI:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.groq.com/openai/v1/chat/completions"

    def chat(self, model, messages):
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": model,
            "messages": messages,
        }
        response = requests.post(self.base_url, headers=headers, json=payload)
        if response.status_code == 200:
            return response.json().get("choices", [{}])[0].get("message", {}).get("content", "Lo siento, no puedo procesar tu solicitud en este momento.")
        else:
            return f"Error: {response.status_code} - {response.text}"

"""Función principal
Esta celda contiene la lógica principal del asistente virtual.
"""

# Función principal
def main():
    print("Bienvenido al Asistente Virtual de Pedidos de Sushi 24/7")

    # Solicitar la API Key de Groq
    api_key = input("Introduce tu API Key de Groq: ").strip()
    if not api_key:
        print("Por favor, introduce una API Key válida para continuar.")
        return

    groq_client = GroqAPI(api_key)

    # Configuración del asistente
    bot_name = input("Nombre del asistente virtual (default: SushiBot): ").strip() or "SushiBot"
    prompt_default = f"""Eres un asistente virtual llamado {bot_name}, especializado en tomar pedidos de sushi y proporcionar información sobre el menú. Respondes de forma clara y amable, y haces preguntas relevantes para completar el pedido del cliente."""
    print("Configuración del asistente completada.")

    chat_history = [{"role": "system", "content": prompt_default}]

    while True:
        user_input = input("\nCliente: ").strip()

        if user_input.lower() in ["salir", "exit"]:
            print("Gracias por usar el asistente. ¡Hasta luego!")
            break

        # Agregar mensaje del cliente al historial
        chat_history.append({"role": "user", "content": user_input})

        # Generar respuesta del bot
        start_time = time.time()
        response_content = groq_client.chat(model="llama3-8b-8192", messages=chat_history)
        end_time = time.time()

        # Agregar respuesta del bot al historial
        chat_history.append({"role": "assistant", "content": response_content})

        # Mostrar respuesta
        print(f"\n{bot_name}: {response_content}")
        print(f"Tiempo de respuesta: {round(end_time - start_time, 2)} segundos.")

        # Mostrar historial si se desea
        show_history = input("¿Quieres ver el historial completo? (s/n): ").strip().lower()
        if show_history == "s":
            print("\nHistorial de Chat:")
            for msg in chat_history:
                role = "Cliente" if msg["role"] == "user" else ("Sistema" if msg["role"] == "system" else bot_name)
                print(f"{role}: {msg['content']}")

"""Ejecutar el programa
Esta celda ejecuta la función principal.
"""

# Ejecutar el programa
if __name__ == "__main__":
    main()